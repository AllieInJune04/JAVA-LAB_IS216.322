/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package baitapthuchanh5_20521086;

import com.microsoft.sqlserver.jdbc.SQLServerStatement;
import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

/**
 *
 * @author kyanh
 */
public class CT_KhamBenh extends javax.swing.JFrame {

    /**
     * Creates new form CT_KhamBenh
     */
    public CT_KhamBenh() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        cboxTenBS = new javax.swing.JComboBox<>();
        cboxTenBN = new javax.swing.JComboBox<>();
        txtKetLuan = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDV = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableDVChon = new javax.swing.JTable();
        lbYeuCau = new javax.swing.JLabel();
        dateNgayKham = new com.toedter.calendar.JDateChooser();
        btnThem = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cboxTenBS.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboxTenBS.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cboxTenBN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboxTenBN.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboxTenBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxTenBNActionPerformed(evt);
            }
        });

        txtKetLuan.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtKetLuan.setText("Kết luận");

        tableDV.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableDV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableDV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDVMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableDV);

        tableDVChon.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableDVChon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tableDVChon);

        lbYeuCau.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbYeuCau.setText("jLabel1");

        dateNgayKham.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                none(evt);
            }
        });
        dateNgayKham.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dateNgayKhamKeyPressed(evt);
            }
        });

        btnThem.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtKetLuan)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cboxTenBN, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cboxTenBS, javax.swing.GroupLayout.Alignment.LEADING, 0, 300, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 2, Short.MAX_VALUE)
                                        .addComponent(dateNgayKham, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lbYeuCau, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboxTenBS, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateNgayKham, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxTenBN, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbYeuCau, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtKetLuan, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    DefaultTableModel dtmDV;
    DefaultTableModel dtmDVChon;
    JTextFieldDateEditor editor;
    Window window;
    DefaultCellEditor cellEditor;
    
    private void TaoBangDV()
    {
        dtmDV = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int column) {
           return false;
        }};
        String TieuDe[] ={"Tên dịch vụ"}; 
        dtmDV.setColumnIdentifiers(TieuDe);
        tableDV.setModel(dtmDV);
        try{
                Connection con = null;
                con = SQLConnection.getSQLConnection();
                String sp[] = new String[1];
                String SQL = "SELECT TENDV FROM DICHVU ";
                SQLServerStatement state = (SQLServerStatement) con.createStatement(); 
                ResultSet rs = state.executeQuery(SQL);

                //TaoBangSanPham();
                while(rs.next())
                {
                    sp[0] = rs.getNString(1);
                    dtmDV.addRow(sp);
                }
            }catch (Exception e){
                System.out.print("Lỗi tạo bảng dịch vụ" + e);
            }
    }
    
    private void TaoBangDVChon(){
        dtmDVChon = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int column) {
           return column==1;
        }};
        
        String TieuDe1[] ={"Tên dịch vụ","Số lượng"}; 
        dtmDVChon.setColumnIdentifiers(TieuDe1);
        tableDVChon.setModel(dtmDVChon);
//        
//        cellEditor = new DefaultCellEditor(new JTextField(){
//            @override
//            
//        });
//        //cellEditor = (DefaultCellEditor)tableDVChon.getCellEditor();
//        tableDVChon.getColumnModel().getColumn(1).setCellEditor(cellEditor);
//        //Column1.setCellEditor(cellEditor);
//        //cellEditor.
    }
    
    public void KhoiTaoFrame()
    {
        TaoBangDV();
        TaoBangDVChon();
        //dateNgayKham.setCalendar(null);
        lbYeuCau.setText(null);
        cboxTenBS.removeAllItems();
        cboxTenBN.removeAllItems();
        
        dateNgayKham.setDateFormatString("dd/MM/yyyy");
        editor = (JTextFieldDateEditor) dateNgayKham.getDateEditor();
        editor.addKeyListener(new KeyListener() {
            @Override
            public void keyPressed(KeyEvent e) {
                    if (e.getKeyCode()==KeyEvent.VK_ENTER){
                        dateNgayKham_ENTER_KEY();
                }
            }
            @Override
            public void keyTyped(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
            @Override
            public void keyReleased(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });

        
        try{
            Connection con = null;
            con = SQLConnection.getSQLConnection();
            String SQL = "SELECT TENBS FROM BACSI";
            SQLServerStatement state = (SQLServerStatement) con.createStatement(); 
            ResultSet rs = state.executeQuery(SQL);
            while(rs.next())
            {
                String ten = rs.getString(1);
                cboxTenBS.addItem(ten);
            }
        }catch (Exception e){
            System.out.print("Lỗi " + e);
        }
        setVisible(true);
    }
    
    private void dateNgayKhamKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateNgayKhamKeyPressed
        
       // System.out.print(evt.getKeyChar());

       dateNgayKham.getDateEditor();
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            if (KiemTraNgayKham(dateNgayKham) == false)
            {
                JOptionPane.showMessageDialog(this,"Chưa nhập ngày khám bệnh hoặc ngày khám bệnh không đúng định dạng dd/mm/yyyy","Lỗi",JOptionPane.ERROR_MESSAGE);
                return;
            }

            String mabs = LayMaBS(cboxTenBS.getSelectedItem().toString());
            if (mabs==null)
            {
                JOptionPane.showMessageDialog(this,"Chưa chọn bác sĩ!","Lỗi",JOptionPane.ERROR_MESSAGE);
                return;
            }

            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
            String ngkham = sdf.format(dateNgayKham.getDate());
            try{
                Connection conn = SQLConnection.getSQLConnection();
                String SQL = "SELECT MABN, YEUCAUKHAM FROM KHAMBENH"
                + " WHERE MABS = ? AND NGAYKHAM=? AND THANHTOAN = 0";
                PreparedStatement ps = conn.prepareStatement(SQL);
                ps.setString(1,mabs);
                ps.setString(2, ngkham);
                ResultSet rs = ps.executeQuery();

                String ten = null;
                while (rs.next()) {
                    //lbYeuCau.setText(rs.getString(2));
                    ten = LayTenBN(rs.getString(1));
                    cboxTenBN.addItem(ten);
                }

                if (ten==null)
                {
                    lbYeuCau.setText("");
                    JOptionPane.showMessageDialog(this,"Không có bệnh nhân chưa thanh toán đối với lịch khám này!","Lỗi",JOptionPane.ERROR_MESSAGE);
                }
            }
            catch(Exception ex) {
                System.out.print(ex);
            }
        }
        
        if (evt.getKeyCode() == KeyEvent.VK_4)
        {
            System.out.print("hehe");
        }
    }//GEN-LAST:event_dateNgayKhamKeyPressed

    private void none(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_none
        JOptionPane.showMessageDialog(this,"nhận được rồi nè!","Lỗi",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_none

    private void cboxTenBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxTenBNActionPerformed
        String tenbn = cboxTenBN.getItemAt(cboxTenBN.getSelectedIndex());
        if (tenbn != null)
        {
            String mabs = LayMaBS(cboxTenBS.getSelectedItem().toString());
            String mabn = LayMaBN(cboxTenBN.getSelectedItem().toString());
            try{
                Connection con = null;
                con = SQLConnection.getSQLConnection();
                String sp[] = new String[1];
                String SQL = "SELECT YEUCAUKHAM FROM KHAMBENH " +
                             "WHERE MABS=? AND MABN=?";
                
                PreparedStatement ps = con.prepareStatement(SQL);
                ps.setString(1,mabs);
                ps.setString(2, mabn);
                ResultSet rs = ps.executeQuery();
                while(rs.next())
                {
                    String yeucau = rs.getNString(1);
                    lbYeuCau.setText(yeucau);
                }
            }catch (Exception e){
                System.out.print("Lỗi lấy mã bệnh nhân " + e);
            }
        }
    }//GEN-LAST:event_cboxTenBNActionPerformed

    private void tableDVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDVMouseClicked
        int index = tableDV.getSelectedRow();
        
        if (index <= dtmDV.getRowCount() && index >= 0)
        {
            String tendv = dtmDV.getValueAt(index,0).toString();
            //int vitri=TenSPisExist(dtmSL, tensp);
                String row[]={tendv,"1"};
                dtmDVChon.addRow(row);
                dtmDV.removeRow(index);
            }
           
            
    }//GEN-LAST:event_tableDVMouseClicked

    private void ThemKetLuan(int makb, String ketluan){
        try{
            Connection con = SQLConnection.getSQLConnection();
            String SQL = "UPDATE KHAMBENH SET KETLUAN = ? WHERE MAKB = ?";
            PreparedStatement prestate = con.prepareStatement(SQL);
            prestate.setString(1, ketluan);
            prestate.setInt(2, makb);
            prestate.executeUpdate();
            JOptionPane.showMessageDialog(this,"Thêm thành công"); 
        }catch (Exception e){
                System.out.println("Lỗi tại thêm kết luận " + e);
        }
    }
    
    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        if(KiemTraNhap()==true){
            String mabs = LayMaBS(cboxTenBS.getSelectedItem().toString());
            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
            String ngaykham = sdf.format(dateNgayKham.getDate());
            String mabn = LayMaBN(cboxTenBN.getSelectedItem().toString());
            int makb = LayMaKB(cboxTenBS.getSelectedItem().toString(),ngaykham,cboxTenBN.getSelectedItem().toString(),lbYeuCau.getText());
            ThemKetLuan(makb,txtKetLuan.getText());
            TaoThuPhi_DV(makb);
//System.out.print("kiểm tra nhập đúng "+ mabs + mabn+" makb="+makb);
            
        }
       // System.out.print(dtmDVChon.getRowCount());
    }//GEN-LAST:event_btnThemActionPerformed

    
    
    
    
    
    private void dateNgayKham_ENTER_KEY()
    {
        if (KiemTraNgayKham(dateNgayKham) == false)
        {
                JOptionPane.showMessageDialog(window,"Chưa nhập ngày khám bệnh hoặc ngày khám bệnh không đúng định dạng dd/mm/yyyy","Lỗi",JOptionPane.ERROR_MESSAGE);
                return;
        }
        String mabs = LayMaBS(cboxTenBS.getSelectedItem().toString());
        if (mabs==null)
        {
                JOptionPane.showMessageDialog(window,"Chưa chọn bác sĩ!","Lỗi",JOptionPane.ERROR_MESSAGE);
                return;
        }
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
        String ngkham = sdf.format(dateNgayKham.getDate());
        cboxTenBN.removeAllItems();
        try{
            Connection conn = SQLConnection.getSQLConnection();
            String SQL = "SELECT MABN, YEUCAUKHAM FROM KHAMBENH"
                    + " WHERE MABS = ? AND NGAYKHAM=? AND THANHTOAN = 0";
            PreparedStatement ps = conn.prepareStatement(SQL);
            ps.setString(1,mabs);
            ps.setString(2, ngkham);
            ResultSet rs = ps.executeQuery();
            String ten = null;
            while (rs.next()) {
                //lbYeuCau.setText(rs.getString(2));
                ten = LayTenBN(rs.getString(1));
                cboxTenBN.addItem(ten);
            }
            if (ten==null)
            {
                lbYeuCau.setText("");
                JOptionPane.showMessageDialog(window,"Không có bệnh nhân chưa thanh toán đối với lịch khám này!","Lỗi",JOptionPane.ERROR_MESSAGE);
            }
        }catch(Exception ex) {
            System.out.print(ex);
        }
    }
    
    private Boolean KiemTraSL(int row)
    {
        try{
            Integer.parseInt(dtmDVChon.getValueAt(row, 1).toString());
            return true;
        }catch(Exception ex)
        {
            return false;
        }
    }
    
    private void SuaSL(){
        for (int i=0;i<dtmDVChon.getRowCount();i++)
            if(KiemTraSL(i)==false)
                dtmDVChon.setValueAt("", i, 1);
    }
    
    
    private Boolean KiemTraBangDVChon()
    {
        if(dtmDVChon.getRowCount() == 0){
            JOptionPane.showMessageDialog(this,"Chưa chọn dịch vụ nào cho bệnh nhân!","Thêm không thành công",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        int SoDongSai=0;
        for (int i=0;i<dtmDVChon.getRowCount();i++)
            if(KiemTraSL(i)==false){
                SuaSL();
                SoDongSai++;
            }
        if (SoDongSai > 0){
            JOptionPane.showMessageDialog(this,"Nhập số lượng dịch vụ phải là số!!","Thêm không thành công",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private Boolean KiemTraNhap()
    {
        if(cboxTenBS.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this,"Chưa chọn bác sĩ!","Thêm không thành công",JOptionPane.ERROR_MESSAGE);
            return false;
        }
            
        if(cboxTenBN.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this,"Chưa chọn bệnh nhân!","Thêm không thành công",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if(KiemTraNgayKham(dateNgayKham) == false){
            JOptionPane.showMessageDialog(this,"Chưa chọn ngày hoặc nhập sai định dạng ngày! ","Thêm không thành công",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if(txtKetLuan.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Chưa có kết luận!","Thêm không thành công",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if (KiemTraBangDVChon() == false)
        {
            return false;
        }
        
        return true;
    }
    
    private int LayMaKB(String tenbs, String ngaykham, String tenbn, String yeucau){
        String mabs=LayMaBS(tenbs);
        String mabn=LayMaBN(tenbn);
        try{
            Connection conn = SQLConnection.getSQLConnection();
            String SQL = "SELECT MAKB FROM KHAMBENH"
                        + " WHERE MABN = ? AND MABS=? AND NGAYKHAM=? AND YEUCAUKHAM=? AND THANHTOAN=0";
            PreparedStatement ps = conn.prepareStatement(SQL);
            ps.setString(1,mabn);
            ps.setString(2, mabs);
            ps.setString(3,ngaykham);
            ps.setString(4,yeucau);
            ResultSet rs = ps.executeQuery();
                
            int makb = 0;
            while (rs.next()) {
                    makb = rs.getInt(1);
            }
            return makb;
        }
            catch(Exception ex) {
                System.out.print("lỗi tại lấy mã khám bệnh "+ex);
                return 0;
            }
    }
    
    private int LayMaDV(String tendv)
    {
        try{
            Connection con = null;
            con = SQLConnection.getSQLConnection();
            String SQL = "SELECT MADV FROM DICHVU WHERE TENDV =?";
            PreparedStatement State = con.prepareStatement(SQL); 
            State.setString(1, tendv);
            ResultSet rs = State.executeQuery();   
            
            int madv = 0;
            while (rs.next()) {
                    madv = rs.getInt(1);
            }
            return madv;
        }catch(Exception ex){
            System.out.print("Lỗi tại lấy mã dịch vụ");
            return 0;
        }
    }
    
    private int LayDonGia(int madv){
        try{
            Connection con = null;
            con = SQLConnection.getSQLConnection();
            String SQL = "SELECT DONGIA FROM DICHVU WHERE MADV =?";
            PreparedStatement State = con.prepareStatement(SQL); 
            State.setInt(1, madv);
            ResultSet rs = State.executeQuery();   
            
            int dongia = -1;
            while (rs.next()) {
                    madv = rs.getInt(1);
            }
            return madv;
        }catch(Exception ex){
            System.out.print("Lỗi tại lấy mã dịch vụ");
            return -1;
        }
    }
    
    private void TaoThuPhi_DV(int makb)
    {
        //int mapn=LayMaPN();
        if(makb!=0)
        {
            for (int i=0;i<tableDVChon.getRowCount();i++)
            {
                String tendv = dtmDVChon.getValueAt(i,0).toString();
                int madv = LayMaDV(tendv);
                int dongia = LayDonGia(madv);
                if (dongia == -1){
                    JOptionPane.showMessageDialog(this,"Không lấy được đơn giá của dịch vụ "+tendv,"Lỗi",JOptionPane.ERROR_MESSAGE);
                    return;
                }  
                
                int sl = Integer.parseInt(dtmDVChon.getValueAt(i,1).toString());
                int thanhtien = sl*dongia;
                if(madv!=0)
                {
                    try{
                        Connection con = null;
                        con = SQLConnection.getSQLConnection();
                        String SQL = "INSERT INTO THUPHI (MAKB,MADV,SOLUONG,THANHTIEN) VALUES(?,?,?,?)";
                        PreparedStatement State = con.prepareStatement(SQL); 
                        State.setInt(1, makb);
                        State.setInt(2, madv);
                        State.setInt(3, sl);
                        State.setInt(4, thanhtien);
                        State.executeUpdate();   
                    }catch(Exception ex)
                    {
                        System.out.print("Lỗi tại tạo thu phí");
                    }
                }
            }
            JOptionPane.showMessageDialog(this,"Thêm thu phí dịch vụ thành công");

        }
    }
    
    //private void editorKeyPressed(java.awt.event.KeyEvent evt)
    
    private Boolean KiemTraNgayKham(JDateChooser ngaykham)
    {
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
        try{
            String ngkham = sdf.format(ngaykham.getDate());
            return true;
        }catch(Exception ex)
        {
            return false;
        }
    }
    
    private String LayTenBN(String mabn)
    {
        try{
            Connection conn = SQLConnection.getSQLConnection();
            String SQL = "SELECT TENBN FROM BENHNHAN"
                        + " WHERE MABN = ?";
            PreparedStatement ps = conn.prepareStatement(SQL);
            ps.setString(1,mabn);
            ResultSet rs = ps.executeQuery();
                
            String ten = null;
            while (rs.next()) {
                    ten = rs.getString(1);
            }
            return ten;
        }
            catch(Exception ex) {
                System.out.print(ex);
                return null;
            }
    }
    
    private String LayMaBS(String tenbs)
    {
        String mabs=null;
        try{
            Connection con = null;
            con = SQLConnection.getSQLConnection();
            String SQL = "SELECT MABS FROM BACSI WHERE TENBS=?";
            PreparedStatement State = con.prepareStatement(SQL); 
            State.setString(1,tenbs);
            ResultSet rs = State.executeQuery();   
            
            while(rs.next())
            {
                mabs = rs.getString(1);
            }
            return mabs;
        }catch (Exception ex){
            System.out.print("Lỗi tai lấy mã bác sĩ " + ex);
            return null;
        }
    }
    
    private String LayMaBN(String tenbn)
    {
        String mabn=null;
        try{
            Connection con = null;
            con = SQLConnection.getSQLConnection();
            String SQL = "SELECT MABN FROM BENHNHAN WHERE TENBN=?";
            PreparedStatement State = con.prepareStatement(SQL); 
            State.setString(1,tenbn);
            ResultSet rs = State.executeQuery();   
            
            while(rs.next())
            {
                mabn = rs.getString(1);
            }
            return mabn;
        }catch (Exception ex){
            System.out.print("Lỗi tai lấy mã bác sĩ " + ex);
            return null;
        }
    }
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CT_KhamBenh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CT_KhamBenh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CT_KhamBenh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CT_KhamBenh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CT_KhamBenh().KhoiTaoFrame();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnThem;
    private javax.swing.JComboBox<String> cboxTenBN;
    private javax.swing.JComboBox<String> cboxTenBS;
    private com.toedter.calendar.JDateChooser dateNgayKham;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lbYeuCau;
    private javax.swing.JTable tableDV;
    private javax.swing.JTable tableDVChon;
    private javax.swing.JTextField txtKetLuan;
    // End of variables declaration//GEN-END:variables
}
